import React, { useEffect, useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";

import axios from "axios";

import { PrefectureDataProps } from "../type/pref";

import { useData } from "../hooks/useData";
import { PrefecturesList } from "../components/PrefecturesList";
import { PopulationGraph } from "../components/PopulationGraph";

interface PrefPopulationDataProps {
  name: string;
  data: number[];
}
const getPopulationNumberByYear = async (url: string) => {
  const response = await axios.get(url, {
    headers: { "X-API-KEY": `${process.env.NEXT_PUBLIC_RESAS_API_KEY}` },
  });
  return response.data.result.data[0].data;
};

/**
 * 都道府県別の総人口推移グラフを表示するSPA(Single Page Application)の構築
 *
 * @constructor
 */
const Home: NextPage = () => {
  /**
   * チェックされた都道府県一覧を格納する変数の作成
   */
  const [prefectureData, setPrefectureData] = useState<PrefectureDataProps[]>(
    []
  );

  /**
   * チェックされた都道府県別の人口数を格納する変数の作成
   */
  const [prefPopulationsData, setPrefPopulationsData] = useState<
    PrefPopulationDataProps[]
  >([]);

  // RESAS-APIの都道府県一覧APIを使用して都道府県を取得する
  const { data: prefecturesData, isError: prefecturesIsError } = useData(
    "https://opendata.resas-portal.go.jp/api/v1/prefectures"
  );

  /**
   * 都道府県クリックでprefectureDataの配列操作する
   */
  const onChangeHandler = (
    prefCode: number | undefined,
    prefName: string,
    checked: boolean
  ) => {
    /**
     * チェックした都道府県がすでにprefectureData内に存在するかどうかのチェック
     */
    if (
      prefectureData.find(
        ({ prefName: dataPrefName }) => dataPrefName === prefName
      )
    ) {
      /**
       * prefectureDataに存在する場合、値を上書きする（例：checkedのtrue / false）
       */
      const updatePrefectureData = prefectureData.map((elm) => {
        if (elm.prefName === prefName) {
          return { ...elm, checked };
        } else {
          return elm;
        }
      });
      setPrefectureData(updatePrefectureData);
    } else {
      /**
       * prefectureDataに存在しない場合セットする
       */
      setPrefectureData([...prefectureData, { prefCode, prefName, checked }]);
    }
  };

  /**
   * APIから総人口数を取得する関数
   *  - APIからは{ year: number, value: number } が返ってくる
   *
   * @param url
   * @returns
   */
  const [populationNumbers, setPopulationNumbers] = useState<number[]>();

  useEffect(() => {
    /**
     * prefectureDataを元にprefPopulationsDataの配列を作成する
     */
    const _prefPopulationData: PrefPopulationDataProps[] = prefectureData
      .map(({ prefCode, prefName, checked }) => {
        const url = `https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?prefCode=${prefCode}`;

        const fetchNumbersData = async () => {
          /**
           * 年度別総人口数から総人口数（value）のみ抜き出してpopulationNumbersにセットする
           */
          const response: { year: number; value: number }[] =
            await getPopulationNumberByYear(url);
          const numbers: number[] = [];
          response.forEach(({ value }) => numbers.push(value));
          const num = response.map(({ value }) => value);
          setPopulationNumbers(numbers);
        };
        fetchNumbersData();

        if (checked) {
          /**
           * チェックされた都道府県の人口構成を取得する
           *  - prefPopulationsDataに該当する都道府県のオブジェクトを追加する
           *   - 型はHighcharts JSの仕様に合わせて { name: string, data: number[] }
           *  - prefPopulationsData内に該当する都道府県のデータがないときだけ処理する
           */
          return { name: prefName, data: populationNumbers };
        } else {
          /**
           * チェックを外した都道府県の人口構成を削除する
           *  - prefPopulationsDataから該当する都道府県のオブジェクトを削除する
           */
          return null;
        }
      })
      .filter((data): data is PrefPopulationDataProps => !!data);

    /**
     * MEMO: mapのあとのfilterのタイプガードはよく使われる。
     */

    /**
     * グラフに表示するデータをセットする
     */
    setPrefPopulationsData(_prefPopulationData);
  }, [prefectureData]);

  return (
    <>
      <Head>
        <title>都道府県別の総人口推移グラフ</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <>
        <h1 className="text-xl md:text-2xl text-center bg-red-200 p-4 md:p-8 font-semibold">
          都道府県別の総人口推移グラフ
        </h1>

        <div className="container mx-auto px-4 py-8">
          <h2 className="text-lg font-semibold mb-4">都道府県</h2>
          {!prefecturesIsError && (
            <PrefecturesList
              prefectures={prefecturesData}
              onChangeEvent={onChangeHandler}
            />
          )}
        </div>

        <div className="container mx-auto px-4 py-8">
          <h2 className="text-lg font-semibold mb-4">人口数</h2>
          <PopulationGraph series={prefPopulationsData} />
        </div>
      </>
    </>
  );
};

export default Home;
